# FILE: brain/services/api_client.py
# Purpose: Centralized client for all HTTP communication from brain and watchdog services to the backend API.

import httpx
from config import BACKEND_API_URL, BRAIN_API_KEY
from utils.console_log import log_console

# Initialize a reusable asynchronous HTTP client.
client = httpx.AsyncClient(
    base_url=BACKEND_API_URL, # Base URL for all API requests.
    headers={
        "Content-Type": "application/json",
        "X-Brain-Api-Key": BRAIN_API_KEY, # API key for backend authentication.
    },
    timeout=45.0, # Default request timeout in seconds.
)

async def _make_request(method: str, endpoint: str, **kwargs) -> dict | None:
    """
    Executes an asynchronous HTTP API request with centralized logging and error handling.

    Args:
        method (str): The HTTP method (e.g., 'GET', 'POST').
        endpoint (str): The API endpoint path (e.g., '/projects/1').
        **kwargs: Additional arguments for `httpx.AsyncClient.request`.

    Returns:
        dict | None: Parsed JSON response, or `None` if status is 204 (No Content).

    Raises:
        httpx.HTTPStatusError: For 4xx or 5xx HTTP responses.
        httpx.RequestError: For network-level errors.
    """
    try:
        log_console(f"API Client: Sending {method} request to {endpoint}", level="debug")
        response = await client.request(method, endpoint, **kwargs)
        response.raise_for_status()

        if response.status_code == 204: # No content for 204 status.
            return None
        
        return response.json()
        
    except httpx.HTTPStatusError as e:
        log_console(f"API Error: {e.response.status_code} calling {e.request.method} {e.request.url}", level="error")
        log_console(f"Response body: {e.response.text}", level="error")
        raise
    except httpx.RequestError as e:
        log_console(f"Network Error calling API: {e.request.method} {e.request.url} - {e}", level="error")
        raise

# --- Core Brain Functions ---

async def get_brain_context(project_id: int) -> dict | None:
    """Fetches the comprehensive context for a given project."""
    return await _make_request("GET", f"/context/{project_id}")

async def get_pending_messages(project_id: int) -> list | None:
    """Retrieves the work queue of pending messages for a specific project."""
    return await _make_request("GET", f"/messages/pending/{project_id}")

async def create_agent_message(payload: dict) -> dict | None:
    """Posts a new message generated by an AI agent to the backend."""
    return await _make_request("POST", "/messages", json=payload)

async def update_message_status(message_id: int, status: str) -> dict | None:
    """Updates the status of a specific message in the backend (e.g., 'sent', 'failed')."""
    payload = {"status": status}
    return await _make_request("PUT", f"/messages/{message_id}/status", json=payload)

async def decrement_message_limit(project_id: int) -> dict | None:
    """Decrements the remaining message limit for a project by one."""
    return await _make_request("PUT", f"/projects/{project_id}/decrement-limit")

async def create_log_entry(payload: dict) -> dict | None:
    """Creates a new log entry in the database via the backend API."""
    return await _make_request("POST", "/logs", json=payload)

async def save_summary(payload: dict) -> dict | None:
    """Saves a new agent memory summary to the backend."""
    return await _make_request("POST", "/summaries", json=payload)

async def increment_agent_message_count(project_id: int, agent_id: int) -> dict | None:
    """Increments a specific agent's message count by one."""
    return await _make_request("POST", f"/agents/{project_id}/{agent_id}/increment-count")

async def get_project_flags(project_id: int) -> dict | None:
    """Retrieves a project's live status flags and dynamic settings (e.g., `is_paused`)."""
    return await _make_request("GET", f"/projects/{project_id}/flags")

async def get_agent_recent_messages(project_id: int, agent_id: int, limit: int = 20) -> list | None:
    """Fetches recent messages for a given agent (sender or receiver)."""
    return await _make_request("GET", f"/agents/{project_id}/{agent_id}/messages?limit={limit}")

# --- Watchdog Functions ---

async def get_active_projects() -> list | None:
    """Retrieves a list of all active projects from the backend."""
    return await _make_request("GET", "/projects/active")

async def get_oldest_pending_message_timestamp(project_id: int) -> dict | None:
    """Retrieves the timestamp of the oldest 'pending' message for a project."""
    return await _make_request("GET", f"/projects/{project_id}/oldest-pending")

async def pause_project(project_id: int, reason_code: str) -> dict | None:
    """Instructs the backend API to pause a specific project with a reason code."""
    message = f"Project automatically paused by system watchdog. Reason: {reason_code}"
    payload = {"code": reason_code, "message": message}
    return await _make_request("PUT", f"/projects/{project_id}/pause", json=payload)